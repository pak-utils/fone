name: Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-ci:
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Check if CI passed on latest commit
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: context.sha,
              status: 'completed'
            });

            const latestRun = runs.workflow_runs[0];
            if (latestRun && latestRun.conclusion === 'success') {
              core.setOutput('passed', 'true');
              console.log('✅ CI passed on latest commit');
            } else {
              core.setOutput('passed', 'false');
              core.setFailed('❌ CI has not passed on the latest commit. Please ensure CI passes before releasing.');
            }

  release:
    needs: check-ci
    if: needs.check-ci.outputs.ci-passed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Try to restore build artifacts from CI
      - name: Restore build artifacts from CI
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            dist/
            coverage/
          key: build-artifacts-${{ github.sha }}
          restore-keys: |
            build-artifacts-

      - name: Build package (CI already verified quality)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set release type
        id: release-type
        run: echo "type=${{ github.event.inputs.release-type }}" >> $GITHUB_OUTPUT

      - name: Bump version and create changelog
        id: version
        run: |
          # Get current version
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"

          # Bump version
          npm version ${{ steps.release-type.outputs.type }} --no-git-tag-version

          # Get new version
          new_version=$(node -p "require('./package.json').version")
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

          # Generate changelog entry with full commit messages
          echo "## [$new_version] - $(date +%Y-%m-%d)" > changelog_entry.md
          echo "" >> changelog_entry.md

          # Add commit messages since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            git log $last_tag..HEAD --pretty=format:"### %s%n%n%b%n" | sed '/^$/N;/^\n$/d' >> changelog_entry.md
          else
            echo "### Initial release" >> changelog_entry.md
            echo "" >> changelog_entry.md
            git log --pretty=format:"### %s%n%n%b%n" | sed '/^$/N;/^\n$/d' >> changelog_entry.md
          fi

          # Update CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Insert new entry after the first line (header)
            head -n 1 CHANGELOG.md > temp_changelog.md
            echo "" >> temp_changelog.md
            cat changelog_entry.md >> temp_changelog.md
            echo "" >> temp_changelog.md
            tail -n +2 CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            # Create new CHANGELOG.md
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat changelog_entry.md >> CHANGELOG.md
          fi

      - name: Commit version bump and changelog
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): bump version to v${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: changelog_entry.md
          draft: false
          prerelease: false
